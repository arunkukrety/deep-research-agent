import getpass
import os
from typing import TypedDict, Annotated
from datetime import datetime
from dotenv import load_dotenv
from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages

from agents import create_query_enhancer_agent, create_planner_agent, create_summarizer_agent
from tools import serper_search_tool, exa_crawl_urls
from utils import init_groq, init_gemini

load_dotenv()

if not os.getenv("GROQ_API_KEY"):
    os.environ["GROQ_API_KEY"] = getpass.getpass("Enter your Groq API key: ")

if not os.getenv("SERPER_API_KEY"):
    print("Warning: SERPER_API_KEY not found in environment variables.")

if not os.getenv("EXA_API_KEY"):
    print("Warning: EXA_API_KEY not found in environment variables.")

os.environ["LANGSMITH_API_KEY"] = os.getenv("LANGSMITH_API_KEY")
os.environ["LANGSMITH_TRACING"] = "true"

class GraphState(TypedDict):
    messages: Annotated[list, add_messages]
    user_input: str
    llm_response: str
    step_info: str

# init llms - groq for research, gemini for final report
llm = init_groq(model="llama-3.1-8b-instant", temperature=0.7)
gemini = init_gemini(model="gemini-2.0-flash", temperature=0.7)

# create the agent instances
query_enhancer_node = create_query_enhancer_agent(gemini)
planner_agent = create_planner_agent([serper_search_tool, exa_crawl_urls], llm)
summarizer_agent = create_summarizer_agent(gemini)

def graph_builder():
    graph = StateGraph(GraphState)
    
    # add nodes: query enhancer -> planner -> summarizer
    graph.add_node("query enhancer", query_enhancer_node)
    graph.add_node("planner", planner_agent)
    graph.add_node("summarizer", summarizer_agent)

    # connect the flow
    graph.add_edge(START, "query enhancer")
    graph.add_edge("query enhancer", "planner")
    graph.add_edge("planner", "summarizer")
    graph.add_edge("summarizer", END)

    return graph.compile()

def save_output_to_markdown(content: str, query: str) -> str:
    # make output folder if it doesnt exist
    if not os.path.exists("output"):
        os.makedirs("output")
    
    # clean query for filename
    clean_query = "".join(c for c in query if c.isalnum() or c in (' ', '-', '_')).strip()
    clean_query = clean_query.replace(' ', '_')[:30]
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{clean_query}_{timestamp}.md"
    
    # create markdown with header
    timestamp_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    markdown_content = f"""# Research Report

**Generated:** {timestamp_str}
**Query:** {query}

---

{content}

---
*Generated by LangGraph Research Agent*
"""
    
    file_path = os.path.join("output", filename)
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(markdown_content)
    
    return file_path

mygraph = graph_builder()

# test run
if __name__ == "__main__":
    print("Testing the research agent workflow...")
    print("=" * 50)

    query = "A2A protocols"
    result = mygraph.invoke({"user_input": query})
    
    final_response = result.get("llm_response", "<no response>")
    
    # save to file instead of printing
    try:
        file_path = save_output_to_markdown(final_response, query)
        print(f"\n✅ Research report saved to: {file_path}")
    except Exception as e:
        print(f"\n❌ Error saving file: {e}")
        print("\n=== Final Report (Console Output) ===\n")
        print(final_response)
    
    print("\n" + "=" * 50)
    print(f"Final step: {result.get('step_info', 'Unknown')}")